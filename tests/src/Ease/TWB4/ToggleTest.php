<?php

declare(strict_types=1);

/**
 * This file is part of the Ease TWBootstrap4 Widgets package
 *
 * https://github.com/VitexSoftware/php-ease-twbootstrap4-widgets
 *
 * (c) Vítězslav Dvořák <http://vitexsoftware.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\Ease\TWB4;

use Ease\TWB4\Widgets\Toggle;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-11-11 at 19:37:36.
 */
class ToggleTest extends \PHPUnit\Framework\TestCase  // \Test\Ease\Html\CheckboxTagTest
{
    protected Toggle $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new Toggle('test-toggle', true, 'on', ['class' => 'custom-toggle']);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * @covers \Ease\ui\TWBSwitch::setProperties
     */
    public function testSetProperties(): void
    {
        $this->object->setProperties(['data-extra' => 'value']);
        $this->assertArrayHasKey('data-extra', $this->object->properties);
        $this->assertEquals('value', $this->object->properties['data-extra']);
    }

    public function testConstructorSetsDefaults(): void
    {
        $toggle = new Toggle('my-toggle');
        // The Toggle constructor may not set properties[] directly, but passes to parent
        // So check the tag property if available, or skip if not implemented
        if (property_exists($toggle, 'properties') && isset($toggle->properties['data-toggle'])) {
            $this->assertEquals('toggle', $toggle->properties['data-toggle']);
        } elseif (method_exists($toggle, 'getTagProperty')) {
            $this->assertEquals('toggle', $toggle->getTagProperty('data-toggle'));
        } else {
            $this->markTestSkipped('No way to check data-toggle property');
        }
    }

    public function testCssAndJsUrls(): void
    {
        $this->assertStringContainsString('bootstrap4-toggle.min.css', $this->object->css);
        $this->assertStringContainsString('bootstrap4-toggle.min.js', $this->object->js);
    }

    public function testRenderedHtmlContainsToggle(): void
    {
        if (method_exists($this->object, 'getRendered')) {
            $html = $this->object->getRendered();
        } elseif (method_exists($this->object, '__toString')) {
            $html = (string)$this->object;
        } else {
            $this->markTestSkipped('No render method available');
            return;
        }
        $this->assertStringContainsString('data-toggle="toggle"', $html);
    }

    /**
     * @covers \Ease\ui\TWBSwitch::finalize
     */
    public function testFinalize(): void
    {
        // Call finalize and check if CSS/JS are included (simulate by checking properties if possible)
        $this->object->finalize();
        // If the class tracks included assets, check them
        if (property_exists($this->object, 'css')) {
            $this->assertStringContainsString('bootstrap4-toggle.min.css', $this->object->css);
        }
        if (property_exists($this->object, 'js')) {
            $this->assertStringContainsString('bootstrap4-toggle.min.js', $this->object->js);
        }
        // If no assertion is possible, mark as risky
        if (!property_exists($this->object, 'css') && !property_exists($this->object, 'js')) {
            $this->markTestIncomplete('No way to assert asset inclusion');
        }
    }
}
